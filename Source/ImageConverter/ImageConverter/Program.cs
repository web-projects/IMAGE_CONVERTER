using ImageConverter.Engine;
using ImageConverter.Helpers;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace ImageConverter
{
    class Program
    {
        static readonly string[] imagePayload = new string[]
        {
            // INGENICO CustId: 1117607, Transaction ID: 097-0000084421
            "89504E470D0A1A0A0000000D494844520000003F0000004B0103000000FD22CD4B000000017352474200AECE1CE90000000467414D410000B18F0BFC610500000006504C5445000000FFFFFFA5D99FDD000000097048597300000EC300000EC301C76FA864000000F04944415428CFADD2414EC3301005D0EC58E608DC841C855EA4726FC0117A0C1608A5272827A0E98E154DD9342DAEFDF9DF9E6911DD12C9D25B78FE583369C06F1100611F7A64E1091539602838C1303946C7D2110C9989A5FCE4981C2CE2356270740615F1E426C1101DAA4E82AA0BD8B2822DAF88174C8ED1300D8EDE3006C34E553DB111DE887761DF022F028782E7022C9AB60298DD1B1EB777151D8E0599590F8E8D90D866E7380891380A0758A070163E6FC0E7E05B78FD8D9233E7593BD43473186705260E233A3E84482CCB0623D76AF8AAAB8C682BD2AABE67C89D81C105FD0DC25F6885FF816BB27E0EE41FE2793241255B26A80000000049454E44AE426082",
            // VERIFONE CustId: 1117600, Transaction ID: 097-0000084582

            // VERIFONE CustId: 1117600, Transaction ID: 097-0000087899
            "89504E470D0A1A0A0000000D494844520000003F0000004B0806000000C7EC5F08000000017352474200AECE1CE90000000467414D410000B18F0BFC6105000000097048597300000EC300000EC301C76FA8640000002A49444154785EEDC13101000000C2A0F54F6D0D0F200000000000000000000000000000000000007ED4004A1F0001AE56958F0000000049454E44AE426082",
            // VERIFONE CustId: 1117600, Transaction ID: 097-0000091176

            "",
         };

        static void Main(string[] args)
        {
            Console.WriteLine($"\r\n==========================================================================================");
            Console.WriteLine($"{Assembly.GetEntryAssembly().GetName().Name} - Version {Assembly.GetEntryAssembly().GetName().Version}");
            Console.WriteLine($"==========================================================================================\r\n");

            IConfiguration configuration = ConfigurationLoad();

            IEnumerable<Tuple<string, string>> signatureList = LoadSignatureGroup(configuration);
            ProcessSignaturePayload(signatureList);

            // INGENICO IMAGE
            //byte[] imageBytes = ConversionHelper.HexToByteArray(imagePayload[0]);
            //byte[] imageBytes = ConversionHelper.HexToByteArray(imagePayload[imagePayload.Length - 2]);
            // VERIFONE IMAGE
            //byte[] imageBytes = ConversionHelper.HexToByteArray(imagePayload[3]);
            //if (imageConverter.ConvertByteArrayToImage(imageBytes))
            //{
            //    imageConverter.ImageDisplay();
            //}
        }

        static void ProcessSignaturePayload(IEnumerable<Tuple<string, string>> signatureList)
        {
            Console.WriteLine("IMAGE FROM BYTE ARRAY...");
            ImageConverterEngine imageConverter = new ImageConverterEngine();

            foreach (Tuple<string, string> item in signatureList)
            {
                try
                {
                    byte[] imageBytes = ConversionHelper.HexToByteArray(item.Item2);
                    {
                        if (imageConverter.ConvertByteArrayToImage(imageBytes, item.Item1))
                        {
                            imageConverter.ImageDisplay(item.Item1);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception processing signature payload=[{ex.Message}]");
                }
            }
        }

        static IConfiguration ConfigurationLoad()
        {
            // Get appsettings.json config.
            IConfiguration configuration = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables()
                .Build();

            return configuration;
        }

        static IEnumerable<Tuple<string, string>> LoadSignatureGroup(IConfiguration configuration)
        {
            var signaturePayload = configuration.GetSection("ImagePayload")
                .GetChildren()
                .ToList()
                .Select(x => new
                {
                    FileName = x.GetValue<string>("Filename"),
                    ImageSignature = x.GetValue<string>("ImageSignature")
                });

            List<Tuple<string, string>> results = new List<Tuple<string, string>>();

            List<string> filenamesInPayload = new List<string>();
            List<string> signaturesInPayload = new List<string>();

            if (signaturePayload.Count() > 0)
            {
                int index = 0;
                filenamesInPayload.AddRange(from value in signaturePayload
                                            select signaturePayload.ElementAt(index++).FileName);
                index = 0;
                signaturesInPayload.AddRange(from value in signaturePayload
                                             select signaturePayload.ElementAt(index++).ImageSignature);

                foreach (Tuple<string, string> combinedOutput in filenamesInPayload
                    .Zip(signaturesInPayload, (vc, vv) => Tuple.Create(vc, vv)))
                {
                    results.Add(combinedOutput);
                }
            }

            return results;
        }
    }
}
